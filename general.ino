////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Calculate the currentThrottle percent
void calcCurrentThrottlePercent(int currentThrottle, int &currentThrottlePercent, int throttleBrake, int minForward, int maxForward) {
  currentThrottlePercent = mapfloat(currentThrottle, minForward, maxForward, 0, 100);
  if (reverseMotorDirection == true && currentThrottle <= throttleBrake && currentThrottlePercent < 0) {
    currentThrottlePercent = 0;
  }
  else if (reverseMotorDirection == false && currentThrottle >= throttleBrake && currentThrottlePercent < 0) {
    currentThrottlePercent = 0;
  }
}

////////////////////////////////////////////////////////////////////////
// Function for Mapping float values
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

////////////////////////////////////////////////////////////////////////
// Debounce Digital Inputs
void debounce(int debounceMax, boolean pinValue, boolean &calcedPinValue, int &integrator) {

  /* Step 1 */
  if (!(pinValue)) {
    if (integrator > 0) {
      integrator--;
    }
  }
  else if (integrator < debounceMax) {
    integrator++;
  }

  /* Step 2 */
  if (integrator == 0) {
    calcedPinValue = false;
  }
  else if (integrator >= debounceMax) {
    calcedPinValue = true;
    integrator = 0;
  }
}

////////////////////////////////////////////////////////////////////////
#if defined(MOT_SYREN50)
// Send throttle command to Syren50
void MOT_SYREN50_sendThrottle(int currentThrottle){
  ST.motor(1, currentThrottle);
}
#endif

////////////////////////////////////////////////////////////////////////
#if defined(MOT_SABER2x32)
// Send throttle command to Sabertooth2x32
void MOT_SABER2x32_sendThrottle(int currentThrottle){
  ST.motor(1, currentThrottle);
  ST.motor(2, -currentThrottle);
}
#endif

////////////////////////////////////////////////////////////////////////
#if defined(MOT_SPARK)
  // Send throttle command to Spark Motor Controllers
  void MOT_SPARK_sendThrottle(int currentThrottle){
    motor1.write(currentThrottle); 
  }
#endif

////////////////////////////////////////////////////////////////////////
#if defined(OLED)
void oledSendData(boolean startup, int batteryPercent, int batteryVoltageWarningPercent, int currentThrottlePercent, 
        int batteryCurrent, boolean cruiseControlOn, boolean brakeLightOn, boolean headLightOn, boolean indicatorOnL, boolean indicatorOnR,
        boolean hazardOn, boolean forwardError, boolean reverseError, boolean cruiseControlError, boolean driveInhibited,
        unsigned long currentMicros, unsigned long &prev_oledSerialInterval, unsigned long oledSerialInterval) {
          
  // Only send to OLED per interval
  if ((currentMicros - prev_oledSerialInterval) >= oledSerialInterval) {

    int OledData[] = {startup, batteryPercent, batteryVoltageWarningPercent, currentThrottlePercent, batteryCurrent, currentWarningAmps, cruiseControlOn, 
            brakeLightOn, headLightOn, indicatorOnL, indicatorOnR, hazardOn, forwardError, reverseError, cruiseControlError, driveInhibited};
  
    int sizeOfArray = sizeof(OledData) / sizeof(OledData[0]);
  
    //Serial.print("sizeOfArray: ");Serial.println(sizeOfArray);
  
    for (int i = 0; i < sizeOfArray; i++){
      if (i == 0) {
        Serial2.print("<");//Serial.print("<");
      }
      Serial2.print(OledData[i]);//Serial.print(OledData[i]);
      if (i == (sizeOfArray - 1)) {
        Serial2.print(">");//Serial.print(">");
      } else {
        Serial2.print(",");//Serial.print(",");
      }
    }
    //Serial.println();
    prev_oledSerialInterval = currentMicros;
  }
}

#endif

//void httpWebServer() {
//  dnsServer.processNextRequest();
//  WiFiClient client = server.available();   // listen for incoming clients
//
//  if (client) {
//    String currentLine = "";
//    while (client.connected()) {
//      if (client.available()) {
//        char c = client.read();
//        if (c == '\n') {
//          if (currentLine.length() == 0) {
//            client.println("HTTP/1.1 200 OK");
//            client.println("Content-type:text/html");
//            client.println();
//            client.print(responseHTML);
//            break;
//          } else {
//            currentLine = "";
//          }
//        } else if (c != '\r') {
//          currentLine += c;
//        }
//      }
//    }
//    client.stop();
//  }
//}
