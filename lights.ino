////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE
////////////////////////////////////////////////////////////////////////

void getSetAllLights(int currentThrottle, int targetThrottle, boolean &brakeLightOn, boolean &headLightOn, 
          boolean &indicatorStatus, boolean &indicatorOnL, boolean &indicatorOnR, boolean &hazardOn,
          unsigned int brakeLightInterval, unsigned long prev_brakeLightInterval, 
          unsigned int headLightInterval, unsigned long prev_headLightInterval, 
          unsigned int indicatorLightInterval, unsigned long prev_indicatorLightInterval,
          unsigned long currentMicros) {
            
  // Set brake lights if vehicle braking
    if ((currentMicros - prev_brakeLightInterval) >= brakeLightInterval) {
      getSetBrakeLight(currentThrottle, targetThrottle, brakeLightOn); 
    }
  // Set headlights if turned on
    if ((currentMicros - prev_headLightInterval) >= headLightInterval) {
      getSetHeadLight(headLightOn);
    }
  // Set indicators if turned on
    if ((currentMicros - prev_brakeLightInterval) >= brakeLightInterval) {
      getSetIndicatorHazard(indicatorStatus, indicatorOnL, indicatorOnR, hazardOn); 
    }
}

// Head lights
void getSetHeadLight(boolean &headLightOn) {

  //Headlights
  if (digitalRead(*MC_head) == true) {
    digitalWrite(headLight_pin, HIGH);
    headLightOn = true;
  } else {
    digitalWrite(headLight_pin, LOW);
    headLightOn = false;
  }
}

// Brake Lights
void getSetBrakeLight(int currentThrottle, int targetThrottle, boolean &brakeLightOn) {
  
  if (reverseMotorDirection == false && targetThrottle < currentThrottle && currentThrottle > throttleBrake) {
    digitalWrite(brakeLight_pin, HIGH);
    brakeLightOn = true;
  }
  else if (reverseMotorDirection == true && targetThrottle > currentThrottle && currentThrottle < throttleBrake) {
    digitalWrite(brakeLight_pin, HIGH);
    brakeLightOn = true;
  }
  else if (currentThrottle == throttleBrake && targetThrottle == throttleBrake) {
    digitalWrite(brakeLight_pin, HIGH);
    brakeLightOn = true;
  }
  else {
    digitalWrite(brakeLight_pin, LOW);
    brakeLightOn = false;
  }
}

void getSetIndicatorHazard(boolean &indicatorStatus, boolean &indicatorOnL, boolean &indicatorOnR, boolean &hazardOn) {

  indicatorOnL = digitalRead(MC_indicL_pin);
  indicatorOnR = digitalRead(MC_indicR_pin);
  hazardOn = digitalRead(MC_hazard_pin);

  //Left indicator
  if ((indicatorOnL == true || hazardOn == true) && indicatorStatus == LOW) {
    digitalWrite(indicLightL_pin, HIGH);
    indicatorStatus = HIGH;
  }
  else if ((indicatorOnL == true || hazardOn == true) && indicatorStatus == HIGH) {
    digitalWrite(indicLightL_pin, LOW);
    indicatorStatus = LOW;
  } 
  else if (indicatorOnL == false || hazardOn == false){
    digitalWrite(indicLightL_pin, LOW);
  }

  //Right indicator & Hazard
  if ((indicatorOnR == true || hazardOn == true) && indicatorStatus == LOW) {
    digitalWrite(indicLightR_pin, HIGH);
    indicatorStatus = HIGH;
  }
  else if ((indicatorOnR == true || hazardOn == true) && indicatorStatus == HIGH) {
    digitalWrite(indicLightR_pin, LOW);
    indicatorStatus = LOW;
  } 
  else if (indicatorOnR == true || hazardOn == true){
    digitalWrite(indicLightR_pin, LOW);
  }
}
