////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Code that is run solely within the Setup routine
////////////////////////////////////////////////////////////////////////

void setupMotorControllers() {

    // Start the Serial interface for the Syren50
  #if defined(MOT_SYREN50)
    Serial1.begin(9600);
    ST.setTimeout(driverTimeout); // Controller must receive commands every X milliseconds or it will stop motors
    ST.setRamping(0); //Disable ramping as it is done within this software
    //ST.autobaud(); // Send Autobaud command
  #endif

  // Start the Serial interface for the Sabertooth2x32
  #if defined(MOT_SABER2x32)
    Serial1.begin(9600);
    ST.setTimeout(driverTimeout); // Controller must receive commands every X milliseconds or it will stop motors
    ST.setRamping(0); //Disable ramping as it is done within this software
  #endif

  // Start the PWM Pins for Spark Motor Controller
  #if defined(MOT_SPARK)
    motor1.attach(4, 1000, 2000);
  #endif
  
}

void setupPeripherals() {

  #if defined(DEBUG_ON)
    Serial.begin(9600);
  #endif

  // Setup serial port for OLED -> data sent to Pro Mini which runs the OLED
  #if defined(OLED) && defined(BOARD_ESP32)
    Serial2.begin(9600, SERIAL_8N1, 16, 17);
  #elif defined(OLED) && defined(BOARD_MAPLEMINI)
    Serial2.begin(9600);
  #elif defined(OLED) && defined(BOARD_BLACKPILL)
    Serial2.begin(9600);
  #endif
  
}

void setupBoards() {

  #if defined(BOARD_BLACKPILL)
    HardwareSerial Serial1(1);
    HardwareSerial Serial2(2);
  #endif
  
}

// Setup any pins
void setupPins() {

  // Setup non configurable pins
  pinMode(inhibit_pin, INPUT);
  
  pinMode(headLight_pin, OUTPUT);
  pinMode(indicLightL_pin, OUTPUT);
  pinMode(indicLightR_pin, OUTPUT);
  pinMode(brakeLight_pin, OUTPUT);

  // Setup the pins for manual control
  #if defined(INPUT_MANUAL) && !defined(BOARD_ESP32)
    pinMode(MC_throttle_pin, INPUT);
    pinMode(MC_reverse_pin, INPUT);
    pinMode(MC_cruiseControl_pin, INPUT);
    pinMode(MC_brake_pin, INPUT);
    pinMode(MC_horn_pin, INPUT);
    pinMode(MC_indicL_pin, INPUT);
    pinMode(MC_indicR_pin, INPUT);
    pinMode(MC_head_pin, INPUT);
    pinMode(MC_hazard_pin, INPUT);
    pinMode(MC_other1_pin, INPUT);
  #elif defined(INPUT_MANUAL) && defined(BOARD_MAPLEMINI)
    pinMode(MC_throttle_pin, INPUT_ANALOG);
    pinMode(MC_reverse_pin, INPUT);
    pinMode(MC_cruiseControl_pin, INPUT);
    pinMode(MC_brake_pin, INPUT);
    pinMode(MC_horn_pin, INPUT);
    pinMode(MC_indicL_pin, INPUT);
    pinMode(MC_indicR_pin, INPUT);
    pinMode(MC_head_pin, INPUT);
    pinMode(MC_hazard_pin, INPUT);
    pinMode(MC_other1_pin, INPUT);
  #elif defined(INPUT_MANUAL) && defined(BOARD_BLACKPILL)
    pinMode(MC_throttle_pin, INPUT_ANALOG);
    pinMode(MC_reverse_pin, INPUT);
    pinMode(MC_cruiseControl_pin, INPUT);
    pinMode(MC_brake_pin, INPUT);
    pinMode(MC_horn_pin, INPUT);
    pinMode(MC_indicL_pin, INPUT);
    pinMode(MC_indicR_pin, INPUT);
    pinMode(MC_head_pin, INPUT);
    pinMode(MC_hazard_pin, INPUT);
    pinMode(MC_other1_pin, INPUT);
  #endif

  #if defined(MOT_SPARK)
    pinMode(mot_pwm1_pin, OUTPUT);
    pinMode(mot_pwm2_pin, OUTPUT);
    pinMode(mot_pwm3_pin, OUTPUT);
    pinMode(mot_pwm4_pin, OUTPUT);
  #endif

}
